# MongoDB - Simple Bitnami Configuration (Docker-Compose Style)
# =============================================================

# Keep Bitnami image (required for Bitnami chart)
# image defaults to bitnami/mongodb

# Simple auth like docker-compose
auth:
  enabled: true
  rootUser: root
  rootPassword: password123
  
# Use standalone architecture  
architecture: standalone

# Disable persistence for testing (in-memory)
persistence:
  enabled: false

# Simple service
service:
  type: ClusterIP
  port: 27017

# Minimal resources
resources:
  requests:
    memory: "256Mi"
    cpu: "100m"
  limits:
    memory: "512Mi" 
    cpu: "200m"

# Disable security contexts that cause permission issues
podSecurityContext:
  enabled: false
  
containerSecurityContext:
  enabled: false

# Disable readiness/liveness probes that cause issues
livenessProbe:
  enabled: false
  
readinessProbe:
  enabled: false

# Disable complex features
metrics:
  enabled: false
  serviceMonitor:
    enabled: false

replicaSet:
  enabled: false

# Simple init script - just create databases, use root user
initdbScripts:
  01-init.js: |
    // Create databases and collections
    db = db.getSiblingDB('legaldb');
    db.createCollection('conversations');
    db.createCollection('documents');
    db.createCollection('messages');
    print('Legal database created');
    
    db = db.getSiblingDB('legal_retrieval');  
    db.createCollection('conversations');
    db.createCollection('documents');
    print('Legal retrieval database created');
    db = db.getSiblingDB('legal_retrieval');
    db.createCollection('conversations');
    db.createCollection('documents');
    print('Legal retrieval database initialized successfully');

# Disable arbiter
arbiter:
  enabled: false

# Disable network policy if causing issues  
networkPolicy:
  enabled: false
