# Legal Retrieval System - Optimized Docker Compose
# =================================================
# Clean architecture with YAML anchors and optimized configuration
# Commands moved from Dockerfile to docker-compose for better separation
# ================================================================

version: '3.8'

# =====================================
# YAML ANCHORS FOR REUSABLE CONFIG
# =====================================

# Common environment variables for all services
x-common-env: &common-env
  DOCKER_ENV: "true"
  APP_NAME: "Legal Retrieval System"
  DEBUG: "true"
  LOG_LEVEL: INFO
  
  # Database connections
  MONGO_URL: "mongodb://admin:password123@mongodb:27017/legaldb?authSource=admin"
  REDIS_URL: "redis://redis:6379/0"
  REDIS_URL_WS: "redis://redis:6379/1" 
  REDIS_URL_RETRIEVAL: "redis://redis:6379/2"
  QDRANT_URL: "http://qdrant:6333"
  
  # Celery configuration
  CELERY_BROKER_URL: "redis://redis:6379/3"
  CELERY_RESULT_BACKEND: "redis://redis:6379/4"
  
  # API Keys configuration
  OPENAI_API_KEY: "${OPENAI_API_KEY:-your_openai_api_key_here}"
  SERPER_API_KEY: ""

# Common Celery worker configuration
x-celery-worker: &celery-worker
  build:
    context: ./src/app
    dockerfile: Dockerfile
  image: legal-retrieval/backend:latest
  restart: unless-stopped
  environment:
    <<: *common-env
    CELERY_CONCURRENCY: "2"
    CELERY_LOGLEVEL: info
    CELERY_POOL: eventlet
    REDIS_STABILITY_WAIT: "15"
  volumes:
    - worker_logs:/app/logs
    - worker_cache:/app/cache
  networks:
    - legal-network
  depends_on:
    - mongodb
    - redis
    - backend-api

services:
  dozzle:
    image: amir20/dozzle:latest
    container_name: legal-dozzle-dev
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "9999:8080"
  # ===================
  # DATABASE SERVICES
  # ===================
  
  mongodb:
    image: mongo:7.0
    container_name: legal-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: legaldb
    command: ["mongod", "--auth", "--bind_ip_all"]
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - legal-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7.2-alpine
    container_name: legal-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - legal-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  qdrant:
    image: qdrant/qdrant:v1.15.0
    container_name: legal-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - legal-network

  # ===================
  # BACKEND SERVICES
  # ===================

  backend-api:
    build:
      context: ./src/app
      dockerfile: Dockerfile
    image: legal-retrieval/backend:latest
    container_name: legal-backend-api
    restart: unless-stopped
    environment:
      <<: *common-env
      API_V1_STR: "/api"
      CORS_ORIGINS: '["http://localhost:3000", "http://localhost:5173", "http://frontend:80"]'
      UVICORN_WORKERS: "1"
      WORKER_TIMEOUT: "300"
    command: >
      bash -c "
        echo 'üöÄ Starting FastAPI Backend...' &&
        echo '‚è≥ Waiting for services...' &&
        python /app/wait-for-services.py &&
        echo 'üåê Starting FastAPI server...' &&
        exec python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "
    ports:
      - "8000:8000"
    volumes:
      - backend_logs:/app/logs
      - backend_cache:/app/cache
    networks:
      - legal-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ===================
  # CELERY WORKERS
  # ===================

  celery-worker-rag:
    <<: *celery-worker
    container_name: legal-celery-rag
    environment:
      <<: *common-env
      APP_NAME: "Legal RAG Worker"
      WORKER_TYPE: "rag"
      CELERY_QUEUES: "rag_queue"
      CELERY_CONCURRENCY: "2"
      CELERY_LOGLEVEL: info
      CELERY_POOL: eventlet
      REDIS_STABILITY_WAIT: "15"
    command: >
      bash -c "
        echo 'üîß Starting RAG Worker...' &&
        python /app/wait-for-services.py &&
        exec celery -A app.workers.rag_worker worker \
          --loglevel=info \
          --pool=eventlet \
          --queues=rag_queue \
          --concurrency=2 \
          --max-tasks-per-child=1000 \
          --prefetch-multiplier=1
      "

  celery-worker-embed:
    <<: *celery-worker
    container_name: legal-celery-embed
    environment:
      <<: *common-env
      APP_NAME: "Legal Embedding Worker"
      WORKER_TYPE: "embed"
      CELERY_QUEUES: "embed_queue"
      CELERY_CONCURRENCY: "2"
      CELERY_LOGLEVEL: info
      CELERY_POOL: eventlet
      REDIS_STABILITY_WAIT: "15"
    command: >
      bash -c "
        echo 'üîß Starting Embed Worker...' &&
        python /app/wait-for-services.py &&
        exec celery -A app.workers.embed_worker worker \
          --loglevel=info \
          --pool=eventlet \
          --queues=embed_queue \
          --concurrency=2 \
          --max-tasks-per-child=1000 \
          --prefetch-multiplier=1
      "

  celery-worker-retrieval:
    <<: *celery-worker
    container_name: legal-celery-retrieval
    environment:
      <<: *common-env
      APP_NAME: "Legal Retrieval Worker"
      WORKER_TYPE: "retrieval"
      CELERY_QUEUES: "retrieval_queue"
      CELERY_CONCURRENCY: "2"
      CELERY_LOGLEVEL: info
      CELERY_POOL: eventlet
      REDIS_STABILITY_WAIT: "15"
      SERPER_API_KEY: "91d19679c0dac6b0447f7f49b8c0d1b56c9e1e01"
    command: >
      bash -c "
        echo 'üîß Starting Retrieval Worker...' &&
        python /app/wait-for-services.py &&
        exec celery -A app.workers.retrieval_worker worker \
          --loglevel=info \
          --pool=eventlet \
          --queues=retrieval_queue \
          --concurrency=2 \
          --max-tasks-per-child=1000 \
          --prefetch-multiplier=1
      "

  celery-worker-link:
    <<: *celery-worker
    container_name: legal-celery-link
    environment:
      <<: *common-env
      APP_NAME: "Legal Link Extract Worker"
      WORKER_TYPE: "link"
      CELERY_QUEUES: "link_extract_queue"
      CELERY_CONCURRENCY: "2"
      CELERY_LOGLEVEL: info
      CELERY_POOL: eventlet
      REDIS_STABILITY_WAIT: "15"
      SERPER_API_KEY: "91d19679c0dac6b0447f7f49b8c0d1b56c9e1e01"
    command: >
      bash -c "
        echo 'üîß Starting Link Worker...' &&
        python /app/wait-for-services.py &&
        exec celery -A app.workers.link_worker worker \
          --loglevel=info \
          --pool=eventlet \
          --queues=link_extract_queue \
          --concurrency=2 \
          --max-tasks-per-child=1000 \
          --prefetch-multiplier=1
      "

  # ===================
  # MONITORING SERVICES
  # ===================

  celery-flower:
    build:
      context: ./src/app
      dockerfile: Dockerfile
    image: legal-retrieval/backend:latest
    container_name: legal-celery-flower
    restart: unless-stopped
    environment:
      <<: *common-env
      APP_NAME: "Legal Celery Flower"
      FLOWER_PORT: "5555"
    command: >
      bash -c "
        echo 'üå∏ Starting Celery Flower...' &&
        python /app/wait-for-services.py &&
        exec celery -A app.celery_worker flower \
          --port=5555 \
          --broker=${CELERY_BROKER_URL} \
          --basic_auth=admin:flower123
      "
    ports:
      - "5555:5555"
    networks:
      - legal-network
    depends_on:
      - redis
      - backend-api

  # ===================
  # FRONTEND SERVICES  
  # ===================

  frontend:
    build:
      context: ./src/legal-chatbot-fe
      dockerfile: Dockerfile
    image: legal-retrieval/frontend:latest
    container_name: legal-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: "http://localhost:8000"
      REACT_APP_WS_URL: "ws://localhost:8000"
    ports:
      - "3000:80"
    networks:
      - legal-network
    depends_on:
      - backend-api

# ===================
# VOLUMES
# ===================

volumes:
  mongo_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/mongo_data
  redis_data:
    driver: local
  qdrant_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/qdrant_storage
  backend_logs:
    driver: local
  backend_cache:
    driver: local
  worker_logs:
    driver: local
  worker_cache:
    driver: local

# ===================
# NETWORKS
# ===================

networks:
  legal-network:
    driver: bridge
    name: legal-retrieval_legal-network
